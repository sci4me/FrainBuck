#!/usr/bin/env lua

local args = { ... }

if #args ~= 1 then
	print("Usage: fb <file>")
	return
end

local fileName = args[1]
local func, err = loadfile(fileName)

if not func then
	print(err)
	return
end

local buffer = {}

local loop = nil
local loopStack = {}

local pointer = 0
local pointerValid = true

local cells = {}
local cellsInUse = 0
local maxCellsInUse = 0
local maxCells = 30000

local function emit(s)
	if s then
		table.insert(buffer, tostring(s))
	end
end

local function emitn(s, n)
	if not n then
		table.insert(buffer, tostring(s))
	elseif type(n) == "number" then
		if n ~= math.floor(n) then
			error("expected integer, got '" .. n .. "'")
		end 

		if n < 0 then
			error("n must be > 0")
		end

		s = tostring(s)
		for i = 1, n do
			table.insert(buffer, s)
		end
	else
		error("expected integer, got " .. type(n))
	end
end

local function getCallerInfo() 
	local localInfo = debug.getinfo(1)
	local n = 1
	local info
	repeat
		info = debug.getinfo(n)
		n = n + 1
	until info.short_src ~= localInfo.short_src
	return info
end

local function checkPointerValidity()
	if not pointerValid then
		error("pointer is invalid due to an unbalanced loop")
	end
end

local function track(direction, n)
	checkPointerValidity()

	if type(n) ~= "number" or n ~= math.floor(n) then
		n = 1
	end

	if direction == "right" then
		pointer = pointer + n
	elseif direction == "left" then
		pointer = pointer - n
	end

	if loop then
		loop[direction] = loop[direction] + n
	end
end

local function goto(n)
	if type(n) ~= "number" and n ~= math.floor(n) then
		error("goto got " .. tostring(n) .. ", expected integer")
	end

	checkPointerValidity()

	if n == pointer then
		return
	end

	local dist = math.abs(n - pointer)

	local c, direction
	if n > pointer then
		c = ">"
		direction = "right"
		pointer = pointer + dist
	elseif n < pointer then
		c = "<"
		direction = "left"
		pointer = pointer - dist
	end

	if loop then
		loop[direction] = loop[direction] + dist
	end

	for i = 1, dist do
		emit(c)
	end
end

local fenv = {
	emit = emit,
	emitln = function(s)
		emit(s)
		emit("\n")
	end,
	inc = function(n)
		emitn("+", n)
	end,
	dec = function(n)
		emitn("-", n)
	end,
	left = function(n)
		track("left", n)
		emitn("<", n)
	end,
	right = function(n)
		track("right", n)
		emitn(">", n)
	end,
	read = function(n)
		emitn(",", n)
	end,
	write = function(n)
		emitn(".", n)
	end,
	open = function()
		table.insert(loopStack, loop)

		local info = getCallerInfo()
		loop = {
			left = 0,
			right = 0,
			start = info.short_src .. ":" .. info.currentline
		}

		emit("[")
	end,
	close = function(allowUnbalanced)
		if not allowUnbalanced then
			if loop.left ~= loop.right then
				local info = getCallerInfo()
				error("unbalanced loop: " .. loop.start .. " to " .. info.short_src .. ":" .. info.currentline)
			end
		else
			if loop.left ~= loop.right then
				pointerValid = false
			end
		end
		loop = loopStack[#loopStack]
		table.remove(loopStack, #loopStack)

		emit("]")
	end,
	clear = function()
		emit("[-]")
	end,
	pointer = function()
		return pointer
	end,
	to = function(n)
		goto(n)
	end,
	at = function(n)
		pointer = n
		pointerValid = true
	end,
	maxCells = function(n)
		maxCells = n
	end,
	alloc = function(n)
		if not n then
			n = 1
		elseif type(n) ~= "number" or n ~= math.floor(n) then
			error("expected integer, got " .. tostring(n))
		elseif n < 1 then
			error("n must be > 0")
		end

		if n > maxCells - cellsInUse then
			error("out of cells")
		else
			cellsInUse = cellsInUse + n

			if cellsInUse > maxCellsInUse then
				maxCellsInUse = cellsInUse
			end
		end

		local result = {}

		local i = 1
		while #result < n do
			if not cells[i] then
				cells[i] = true
				table.insert(result, i - 1)

				local rt = pointer
				goto(i - 1)
				emit("[-]")
				goto(pointer)
			end
			i = i + 1
		end

		assert(#result == n)

		return unpack(result)
	end,
	free = function(...)
		local addrs = { ... }
		for i = 1, #addrs do
			local addr = addrs[i]
			
			if type(addr) ~= "number" or addr ~= math.floor(addr) then
				error("invalid address " .. tostring(addr))
			end

			local raddr = addr + 1

			if not cells[raddr] then
				error("attempt to free cell " .. tostring(addr) .. " which is already free")
			end

			cells[raddr] = false
		end
		cellsInUse = cellsInUse - #addrs
	end,
	allocated = function(addr)
		return cells[addr + 1]
	end,
	allocBlock = function(size)
		local block = {}

		for i = 1, maxCells do
			local good = true

			local j = 0
			while j < size do
				if cells[i + j] then
					good = false
					i = i + j
				end
				j = j + 1
			end

			if good then
				block.start = i - 1
				block.length = size

				local rt = pointer
				for j = i, i + size - 1 do
					cells[j] = true
					goto(j - 1)
					emit("[-]")
				end
				goto(rt)

				cellsInUse = cellsInUse + size

				if cellsInUse > maxCellsInUse then
					maxCellsInUse = cellsInUse
				end

				return block
			end
		end
	end,
	freeBlock = function(blk)
		assert(blk)

		for i = blk.start, blk.start + blk.length - 1 do
			if cells[i] then
				error("block corrupted")
			end

			cells[i] = false
		end

		cellsInUse = cellsInUse - blk.length
	end,
	blockAllocated = function(blk)
		assert(blk)

		for i = blk.start, blk.start + blk.length - 1 do
			if not cells[i] then
				return false
			end
		end

		return true
	end,
	string = _G.string,
	math = _G.math,
	table = _G.table,
	coroutine = _G.coroutine,
	xpcall = _G.xpcall,
	tostring = _G.tostring,
	print = _G.print,
	unpack = _G.unpack,
	next = _G.next,
	assert = _G.assert,
	tonumber = _G.tonumber,
	pcall = _G.pcall,
	type = _G.type,
	select = _G.select,
	pairs = _G.pairs,
	ipairs = _G.ipairs,
	error = _G.error
}
fenv._G = fenv

local included = {}
fenv.include = function(file)
	if included[file] then
		return
	end
	included[file] = true

	local func, err = loadfile(file)

	if not func then
		error(err)
	end

	setfenv(func, fenv)
	local status, ret, err = xpcall(func, debug.traceback)
	if not status or err then
		error(ret)
	end
end

setfenv(func, fenv)

local status, ret, err = xpcall(func, debug.traceback)
if status and not err then
	if loop then
		print("Loop has no end: " .. loop.start)
		return
	end

	local code = table.concat(buffer)

	local instructions = 0
	for i = 1, #code do
		local c = code:sub(i, i)
		if c == '+' or c == '-' or c == '<' or c == '>' or c == '[' or c == ']' or c == ',' or c == '.' then
			instructions = instructions + 1
		end
	end

	print("max cells: " .. maxCellsInUse)
	print("instructions: " .. instructions)
	print()

	local outFh = io.open(fileName .. ".bf", "w")
	outFh:write(code)
	outFh:flush()
	outFh:close()
else
	print(ret)
end